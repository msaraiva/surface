defmodule Mix.Tasks.Compile.SurfaceTest do
  use ExUnit.Case, async: false

  import Mix.Tasks.Compile.Surface

  @hooks_rel_output_dir "tmp/_hooks"
  @hooks_output_dir Path.join(File.cwd!(), @hooks_rel_output_dir)
  @test_components_dir Path.join(File.cwd!(), "test/support/mix/tasks/compile/surface_test")

  @button_src_hooks_file Path.join(@test_components_dir, "fake_button.hooks.js")
  @button_dest_hooks_file Path.join(
                            @hooks_output_dir,
                            "Mix.Tasks.Compile.SurfaceTest.FakeButton.hooks.js"
                          )
  @link_src_hooks_file Path.join(@test_components_dir, "fake_link.hooks.js")
  @link_dest_hooks_file Path.join(
                          @hooks_output_dir,
                          "Mix.Tasks.Compile.SurfaceTest.FakeLink.hooks.js"
                        )

  @hooks_index_file Path.join(@hooks_output_dir, "index.js")

  setup_all do
    Mix.shell(Mix.Shell.Process)

    conf_before = Application.get_env(:surface, :compiler, [])
    Application.put_env(:surface, :compiler, hooks_output_dir: @hooks_rel_output_dir)

    on_exit(fn ->
      Application.put_env(:surface, :compiler, conf_before)
    end)

    :ok
  end

  setup do
    if File.exists?(@hooks_output_dir) do
      File.rm_rf!(@hooks_output_dir)
    end

    on_exit(fn ->
      File.rm_rf!(@hooks_output_dir)
    end)

    :ok
  end

  test "copy hooks files to output dir" do
    refute File.exists?(@hooks_output_dir)

    run([])

    assert File.read!(@button_src_hooks_file) == File.read!(@button_dest_hooks_file)
    assert File.read!(@link_src_hooks_file) == File.read!(@link_dest_hooks_file)
  end

  test "generate index.js file for hooks" do
    refute File.exists?(@hooks_output_dir)

    run([])

    assert File.read!(@hooks_index_file) == """
           /* This file was generated by the Surface compiler */

           function ns(hooks, nameSpace) {
             const updatedHooks = {}
             Object.keys(hooks).map(function(key) {
               updatedHooks[`${nameSpace}#${key}`] = hooks[key]
             })
             return updatedHooks
           }

           import * as c1 from "./Mix.Tasks.Compile.SurfaceTest.FakeButton.hooks"
           import * as c2 from "./Mix.Tasks.Compile.SurfaceTest.FakeLink.hooks"

           let hooks = Object.assign(
             ns(c1, "Mix.Tasks.Compile.SurfaceTest.FakeButton"),
             ns(c2, "Mix.Tasks.Compile.SurfaceTest.FakeLink")
           )

           export default hooks
           """
  end

  test "update dest hook file and index.js if there are changes in hooks" do
    refute File.exists?(@hooks_output_dir)

    run([])

    watcher = watch(@hooks_output_dir)
    touch_file!(@button_src_hooks_file)

    run([])

    assert_file_updated(watcher, @button_dest_hooks_file)
    assert_file_updated(watcher, @hooks_index_file)
  end

  test "don't update dest hook file nor index.js if there's no change in hooks" do
    refute File.exists?(@hooks_output_dir)

    run([])

    hook_file_time_1 = mtime!(@button_dest_hooks_file)
    index_file_time_1 = mtime!(@hooks_index_file)

    run([])

    hook_file_time_2 = mtime!(@button_dest_hooks_file)
    index_file_time_2 = mtime!(@hooks_index_file)

    assert hook_file_time_1 == hook_file_time_2
    assert index_file_time_1 == index_file_time_2
  end

  test "generate index.js with empty object if there's no hooks available" do
    refute File.exists?(@hooks_output_dir)

    generate_files({[], []})

    assert File.read!(@hooks_index_file) == """
           /* This file was generated by the Surface compiler */

           export default {}
           """
  end

  test "delete unused hooks files from output dir and update index.js" do
    refute File.exists?(@hooks_output_dir)

    run([])

    unused_file = Path.join(@hooks_output_dir, "Unused.hooks.js")
    File.touch!(unused_file)

    assert File.exists?(unused_file)

    watcher = watch(@hooks_output_dir)
    run([])

    refute File.exists?(unused_file)
    assert_file_updated(watcher, @hooks_index_file)
  end

  defp watch(dir) do
    {:ok, pid} = FileSystem.start_link(dirs: [dir], no_defer: true)
    FileSystem.subscribe(pid)
    pid
  end

  defp touch_file!(file) do
    time =
      :erlang.universaltime()
      |> :calendar.datetime_to_gregorian_seconds()
      |> Kernel.+(1)
      |> :calendar.gregorian_seconds_to_datetime()

    File.touch!(file, time)
  end

  defp assert_file_updated(watcher, file) do
    assert_receive {:file_event, ^watcher, {^file, events}}, 100
    assert :modified in events
  end

  defp mtime!(file) do
    %File.Stat{mtime: mtime} = File.stat!(file)
    mtime
  end
end
