defmodule Mix.Tasks.Compile.SurfaceTest do
  use ExUnit.Case, async: false

  import Mix.Tasks.Compile.Surface

  @hooks_output_dir "tmp/_hooks"
  @hooks_abs_output_dir Path.join(File.cwd!(), @hooks_output_dir)
  @test_components_dir Path.join(File.cwd!(), "test/support/mix/tasks/compile/surface_test")

  setup_all do
    Mix.shell(Mix.Shell.Process)

    conf_before = Application.get_env(:surface, :compiler, [])
    Application.put_env(:surface, :compiler, hooks_output_dir: @hooks_output_dir)

    on_exit(fn ->
      Application.put_env(:surface, :compiler, conf_before)
    end)

    :ok
  end

  setup do
    if File.exists?(@hooks_abs_output_dir) do
      File.rm_rf!(@hooks_abs_output_dir)
    end

    on_exit(fn ->
      File.rm_rf!(@hooks_abs_output_dir)
    end)

    :ok
  end

  test "copy hooks files to output dir" do
    refute File.exists?(@hooks_abs_output_dir)

    run([])

    # FakeButton

    src_hooks_file = Path.join(@test_components_dir, "fake_button.hooks.js")

    dest_hooks_file =
      Path.join(@hooks_abs_output_dir, "Mix.Tasks.Compile.SurfaceTest.FakeButton.hooks.js")

    assert File.read!(src_hooks_file) == File.read!(dest_hooks_file)

    # FakeLink

    src_hooks_file = Path.join(@test_components_dir, "fake_link.hooks.js")

    dest_hooks_file =
      Path.join(@hooks_abs_output_dir, "Mix.Tasks.Compile.SurfaceTest.FakeLink.hooks.js")

    assert File.read!(src_hooks_file) == File.read!(dest_hooks_file)
  end

  test "generate index.js file for hooks" do
    refute File.exists?(@hooks_abs_output_dir)

    run([])

    index_file = Path.join(@hooks_abs_output_dir, "index.js")

    assert File.read!(index_file) == """
           /* This file was generated by the Surface compiler */

           function ns(hooks, nameSpace) {
             const updatedHooks = {}
             Object.keys(hooks).map(function(key) {
               updatedHooks[`${nameSpace}#${key}`] = hooks[key]
             })
             return updatedHooks
           }

           import * as c1 from "./Mix.Tasks.Compile.SurfaceTest.FakeButton.hooks"
           import * as c2 from "./Mix.Tasks.Compile.SurfaceTest.FakeLink.hooks"

           let hooks = Object.assign(
             ns(c1, "Mix.Tasks.Compile.SurfaceTest.FakeButton"),
             ns(c2, "Mix.Tasks.Compile.SurfaceTest.FakeLink")
           )

           export default hooks
           """
  end

  test "update dest hook file and index.js if there are changes in hooks" do
    refute File.exists?(@hooks_abs_output_dir)

    index_file = Path.join(@hooks_abs_output_dir, "index.js")
    src_hooks_file = Path.join(@test_components_dir, "fake_button.hooks.js")

    dest_hooks_file =
      Path.join(@hooks_abs_output_dir, "Mix.Tasks.Compile.SurfaceTest.FakeButton.hooks.js")

    %File.Stat{mtime: src_hooks_file_time} = File.stat!(src_hooks_file)

    run([])

    new_time = add_secs(src_hooks_file_time, -1)
    File.touch!(index_file, new_time)
    File.touch!(dest_hooks_file, new_time)
    %File.Stat{mtime: index_file_time} = File.stat!(index_file)
    %File.Stat{mtime: dest_hooks_file_time} = File.stat!(dest_hooks_file)

    assert index_file_time < src_hooks_file_time
    assert dest_hooks_file_time < src_hooks_file_time

    run([])

    %File.Stat{mtime: index_file_time} = File.stat!(index_file)
    %File.Stat{mtime: dest_hooks_file_time} = File.stat!(dest_hooks_file)

    assert index_file_time > src_hooks_file_time
    assert dest_hooks_file_time > src_hooks_file_time
  end

  test "don't update dest hook file and index.js if there's no change in hooks" do
    refute File.exists?(@hooks_abs_output_dir)

    index_file = Path.join(@hooks_abs_output_dir, "index.js")

    dest_hooks_file =
      Path.join(@hooks_abs_output_dir, "Mix.Tasks.Compile.SurfaceTest.FakeButton.hooks.js")

    run([])

    %File.Stat{mtime: index_file_time} = File.stat!(index_file)
    new_time = add_secs(index_file_time, 10)
    File.touch!(index_file, new_time)
    File.touch!(dest_hooks_file, new_time)

    run([])

    %File.Stat{mtime: index_file_time} = File.stat!(index_file)
    %File.Stat{mtime: dest_hooks_file_time} = File.stat!(dest_hooks_file)

    assert index_file_time == new_time
    assert dest_hooks_file_time == new_time
  end

  test "generate index.js with empty object if there's no hooks available" do
    refute File.exists?(@hooks_abs_output_dir)

    generate_files({[], []})

    index_file = Path.join(@hooks_abs_output_dir, "index.js")

    assert File.read!(index_file) == """
           /* This file was generated by the Surface compiler */

           export default {}
           """
  end

  test "delete unused hooks files from output dir and update index.js" do
    refute File.exists?(@hooks_abs_output_dir)

    run([])

    unused_file = Path.join(@hooks_abs_output_dir, "Unused.hooks.js")
    File.touch!(unused_file)

    assert File.exists?(unused_file)

    index_file = Path.join(@hooks_abs_output_dir, "index.js")
    %File.Stat{mtime: index_file_time} = File.stat!(index_file)
    index_file_time_before_run = add_secs(index_file_time, 10)
    File.touch!(index_file, index_file_time_before_run)

    run([])

    %File.Stat{mtime: index_file_time} = File.stat!(index_file)

    refute File.exists?(unused_file)
    assert index_file_time != index_file_time_before_run
  end

  defp add_secs(time, secs) do
    gregorian_secs = :calendar.datetime_to_gregorian_seconds(time)
    :calendar.gregorian_seconds_to_datetime(gregorian_secs + secs)
  end
end
